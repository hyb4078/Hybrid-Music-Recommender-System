<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="top.wangruns.trackstacking.dao.ReviewDao">

    <insert id="insert" parameterType="top.wangruns.trackstacking.model.Review">
        insert into review (user_id,song_id,review_content) values(#{user_id},#{song_id},#{review_content})
    </insert>

    <select id="selectLikeByUserId" parameterType="int"
            resultType="top.wangruns.trackstacking.model.Like">
        select * from liking where user_id = #{user_id}
    </select>

    <!-- 好久不用，一段大SQLs下来，感觉投都昏了...
        （可能这种时候就体现出视图的优势了吧⊙o⊙）
        目标：获取当前歌曲带有点赞数目的评论信息
        songReviewWithUserNameTb表：
            （1）先从评论表中选出与当前歌曲相关的元组
            （2）再给相关的元组中的用户关联上昵称信息
            （3）reviewId,userId,userName,review,reviewTime
        likeCountTb表：
            （1）先从评论表中选中与当前歌曲相关的元组并作评论ID投影
            （2）根据相关的评论ID统计出评论被点赞的次数
            （3）reviewId,count(reviewId) as likeCoefficient
        songReviewWithUserNameTb左连接likeCountTb：
            （1）将上面两个表在reviewId上面做左连接
            （2）[mysql]用ifnull(字段名,默认值)填充连接的空缺值NULL
            （3）[oracle]用nvl(字段名,默认值)填充连接的空缺值NULL
        最终选择精彩评论的Top 10
    -->
    <select id="selectHotReviewWithLikeNumber" parameterType="int"
            resultType="top.wangruns.trackstacking.model.Review">
        select songReviewWithUserNameTb.review_id,user_name,review_content,create_time,ifnull(likeCoefficient,0) as likeCoefficient
         from
            ( select review_id,user.user_id,user_name,review_content,create_time
            from ( select review_id,user_id,review_content,date(create_time) as create_time from review where song_id=#{song_id} ) as songReviewTb,user
            where songReviewTb.user_id=user.user_id
            ) as songReviewWithUserNameTb

        left join

            ( select review_id,count(review_id) as likeCoefficient from liking
            where review_id in ( select review_id from review where song_id=#{song_id} )
            group by review_id
            ) as likeCountTb

        on songReviewWithUserNameTb.review_id=likeCountTb.review_id

        order by likeCoefficient desc limit 10
    </select>

    <select id="selectByLike" parameterType="top.wangruns.trackstacking.model.Like"
            resultType="top.wangruns.trackstacking.model.Like">
        select * from liking where user_id = #{user_id} and review_id =#{review_id}
    </select>

    <insert id="insertLikeRecord" parameterType="top.wangruns.trackstacking.model.Like">
        insert into liking (user_id,review_id) values(#{user_id},#{review_id})
    </insert>

    <delete id="deleteLikeRecordById" parameterType="int">
        delete from liking where like_id = #{like_id}
    </delete>

    <select id="selectNewReviewWithLikeNumber" parameterType="int"
            resultType="top.wangruns.trackstacking.model.Review">
        select songReviewWithUserNameTb.review_id,user_name,review_content,create_time,ifnull(likeCoefficient,0) as likeCoefficient
         from
            ( select review_id,user.user_id,user_name,review_content,create_time
            from ( select review_id,user_id,review_content, create_time from review where song_id=#{song_id} ) as songReviewTb,user
            where songReviewTb.user_id=user.user_id
            ) as songReviewWithUserNameTb

        left join

            ( select review_id,count(review_id) as likeCoefficient from liking
            where review_id in ( select review_id from review where song_id=#{song_id} )
            group by review_id
            ) as likeCountTb

        on songReviewWithUserNameTb.review_id=likeCountTb.review_id

        order by create_time desc
    </select>

    <!--
    传递单个参数的批量删除：
        （1）参数为array类型：collection=”array“
        （2）参数为list类型：collection=”list“
        https://blog.csdn.net/javaee_sunny/article/details/52511842
     -->
    <delete id="deleteByIds" parameterType="int">
        delete from review where review_id in
        <foreach collection="array" item="review_id" open="(" close=")" separator=",">
            #{review_id}
        </foreach>
    </delete>


</mapper>